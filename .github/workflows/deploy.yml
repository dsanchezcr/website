name: Deploy Infrastructure and Application

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - 'api/**'
      - 'src/**'
      - 'blog/**'
      - 'docusaurus.config.js'
      - 'package.json'
  workflow_dispatch:

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: dsanchezcr
  AZURE_LOCATION: eastus2

jobs:
  validate:
    name: Validate Bicep Templates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate Bicep
        run: |
          az bicep build --file infra/main.bicep
          echo "âœ… Bicep template validation successful"

  deploy-infra:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      staticWebAppName: ${{ steps.deploy.outputs.staticWebAppName }}
      functionAppName: ${{ steps.deploy.outputs.functionAppName }}
      storageAccountName: ${{ steps.deploy.outputs.storageAccountName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: Deploy Infrastructure
        id: deploy
        run: |
          DEPLOYMENT_OUTPUT=$(az deployment group create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --template-file infra/main.bicep \
            --parameters infra/main.parameters.json \
            --parameters repositoryUrl=${{ github.server_url }}/${{ github.repository }} \
            --parameters repositoryBranch=${{ github.ref_name }} \
            --query 'properties.outputs' \
            --output json)
          
          echo "Deployment outputs: $DEPLOYMENT_OUTPUT"
          
          # Extract outputs and set them as job outputs
          STATIC_WEB_APP_NAME=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.staticWebAppName.value')
          FUNCTION_APP_NAME=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.functionAppName.value')
          STORAGE_ACCOUNT_NAME=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.storageAccountName.value')
          
          echo "staticWebAppName=$STATIC_WEB_APP_NAME" >> $GITHUB_OUTPUT
          echo "functionAppName=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
          echo "storageAccountName=$STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: Build and Deploy Application
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Docusaurus site
        run: npm run build

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build Azure Functions
        run: |
          cd api
          dotnet restore
          dotnet build --configuration Release

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Functions
        run: |
          cd api
          dotnet publish --configuration Release --output ./output
          az functionapp deployment source config-zip \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ needs.deploy-infra.outputs.functionAppName }} \
            --src ./output.zip

      - name: Deploy to Static Web Apps
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          api_location: ""
          output_location: "build"
          skip_api_build: true
