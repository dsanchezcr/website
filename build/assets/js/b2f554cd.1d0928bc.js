"use strict";(self.webpackChunkdsanchezcr=self.webpackChunkdsanchezcr||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"colones-exchange-rate-package","metadata":{"permalink":"/blog/colones-exchange-rate-package","source":"@site/blog/2023-11-06-ColonesExchangeRate.mdx","title":"Colones Exchange Rate - NuGet Package","description":"In this post I am introducing a new NuGet package that I created to get the exchange rate of the Costa Rican Col\xf3n currency conversion to US Dollars and Euros.","date":"2023-11-06T18:00:00.000Z","formattedDate":"November 6, 2023","tags":[{"label":"NuGet","permalink":"/blog/tags/nu-get"},{"label":".NET Standard","permalink":"/blog/tags/net-standard"},{"label":"Colones","permalink":"/blog/tags/colones"},{"label":"Exchange Rate","permalink":"/blog/tags/exchange-rate"},{"label":"Costa Rica","permalink":"/blog/tags/costa-rica"}],"readingTime":0.155,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"Colones Exchange Rate - NuGet Package","description":"In this post I am introducing a new NuGet package that I created to get the exchange rate of the Costa Rican Col\xf3n currency conversion to US Dollars and Euros.","slug":"colones-exchange-rate-package","authors":["dsanchezcr"],"tags":["NuGet",".NET Standard","Colones","Exchange Rate","Costa Rica"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/CosmicWorks/CosmicWorks.jpg","date":"2023-11-06T18:00"},"unlisted":false,"nextItem":{"title":"Extending CosmicWorks with Azure Cognitive Search and Azure OpenAI","permalink":"/blog/cosmicworks-azure-cognitive-search-azure-openai"}},"content":"In this post I am introducing a new NuGet package that I created to get the exchange rate of the Costa Rican Col\xf3n currency conversion to US Dollars and Euros.\\r\\n\\r\\n\x3c!--truncate--\x3e"},{"id":"cosmicworks-azure-cognitive-search-azure-openai","metadata":{"permalink":"/blog/cosmicworks-azure-cognitive-search-azure-openai","source":"@site/blog/2023-09-25-CosmicWorks.mdx","title":"Extending CosmicWorks with Azure Cognitive Search and Azure OpenAI","description":"In this post I show how to add Azure Cognitive Search to CosmicWorks to enable full text search and how to add Azure OpenAI to CosmicWorks to enable chat with GPT.","date":"2023-09-25T18:00:00.000Z","formattedDate":"September 25, 2023","tags":[{"label":"Azure Cosmos DB","permalink":"/blog/tags/azure-cosmos-db"},{"label":"Azure OpenAI","permalink":"/blog/tags/azure-open-ai"},{"label":"Azure Cognitive Search","permalink":"/blog/tags/azure-cognitive-search"},{"label":"ASP.NET","permalink":"/blog/tags/asp-net"},{"label":"GitHub Actions","permalink":"/blog/tags/git-hub-actions"}],"readingTime":0.355,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"Extending CosmicWorks with Azure Cognitive Search and Azure OpenAI","description":"In this post I show how to add Azure Cognitive Search to CosmicWorks to enable full text search and how to add Azure OpenAI to CosmicWorks to enable chat with GPT.","slug":"cosmicworks-azure-cognitive-search-azure-openai","authors":["dsanchezcr"],"tags":["Azure Cosmos DB","Azure OpenAI","Azure Cognitive Search","ASP.NET","GitHub Actions"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/CosmicWorks/CosmicWorks.jpg","date":"2023-09-25T18:00"},"unlisted":false,"prevItem":{"title":"Colones Exchange Rate - NuGet Package","permalink":"/blog/colones-exchange-rate-package"},"nextItem":{"title":"Connecting to SQL Azure without Secrets","permalink":"/blog/SQL-Azure-Without-Secrets"}},"content":"In this post I show how to add Azure Cognitive Search to CosmicWorks to enable full text search and how to add Azure OpenAI to CosmicWorks to enable chat with GPT from Azure OpenAI.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Introduction\\r\\n\\r\\nCosmicWorks is a sample application with demo data that shows how to use Azure Cosmos DB with the .NET SDK. It is a simple application that allows you to manage sample product data.\\r\\n\\r\\n##"},{"id":"SQL-Azure-Without-Secrets","metadata":{"permalink":"/blog/SQL-Azure-Without-Secrets","source":"@site/blog/2023-07-03-SQLAzureWithoutSecrets.mdx","title":"Connecting to SQL Azure without Secrets","description":"In this post I will show you how to connect to SQL Azure without using secrets, using Azure Active Directory.","date":"2023-07-03T18:00:00.000Z","formattedDate":"July 3, 2023","tags":[{"label":"SQL Azure","permalink":"/blog/tags/sql-azure"},{"label":"GitHub","permalink":"/blog/tags/git-hub"},{"label":"Azure Active Directory","permalink":"/blog/tags/azure-active-directory"}],"readingTime":2.2,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"Connecting to SQL Azure without Secrets","description":"In this post I will show you how to connect to SQL Azure without using secrets, using Azure Active Directory.","slug":"SQL-Azure-Without-Secrets","authors":["dsanchezcr"],"tags":["SQL Azure","GitHub","Azure Active Directory"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/SQLAzureWithoutSecrets/SQLAzureWithoutSecrets.jpg","date":"2023-07-03T18:00"},"unlisted":false,"prevItem":{"title":"Extending CosmicWorks with Azure Cognitive Search and Azure OpenAI","permalink":"/blog/cosmicworks-azure-cognitive-search-azure-openai"},"nextItem":{"title":"How many days work items have been open in Azure Boards","permalink":"/blog/days-work-items-open"}},"content":"In this post I will show you how to connect to SQL Azure without using secrets, using Azure Active Directory.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Introduction\\r\\n\\r\\nWith GitHub Advanced Security, you can scan your code for secrets and vulnerabilities in your codebase and git history by using [Secret Scanning](https://docs.github.com/code-security/secret-scanning/about-secret-scanning) or even go one step further and use [push protection](https://docs.github.com/enterprise-cloud@latest/code-security/secret-scanning/protecting-pushes-with-secret-scanning) to avoid secrets being pushed in your repository. This is an excellent feature when we have secrets in our applications, but it is not enough when we talk about passwords in connections strings, you also need to rotate those passwords, protect them, make sure you are using the correct one for each different stage (Dev, QA, Prod, etc.). A solution to this problem is to use Managed Service Identity (MSI) instead of usernames and passwords to connect to different Azure services, including SQL Azure.\\r\\n\\r\\n## Enabling Azure Active Directory authentication on SQL Azure\\r\\n\\r\\nFirst, we need to make sure Azure Active Directory authentication is enabled on SQL Azure. \\r\\n\\r\\n![](../static/img/SQLAzureWithoutSecrets/AADEnabledSQLServer.jpg)\\r\\n\\r\\n## Adding users to SQL Azure and assigning permissions\\r\\n\\r\\nTo do this, we need to connect to the SQL Azure server using SSMS, and run the following query that creates a user from an Azure Active Directory account, and assigns the db_datareader role to it. You can learn more about the [SQL roles here](https://learn.microsoft.com/sql/relational-databases/security/authentication-access/database-level-roles?https://learn.microsoft.com/sql/relational-databases/security/authentication-access/database-level-roles?WT.mc_id=DT-MVP-5005361#fixed-database-roles).\\r\\n\\r\\n```sql\\r\\nCREATE USER [<user@AAD-tenant-domain>] FROM EXTERNAL PROVIDER;\\r\\nALTER ROLE db_datareader ADD MEMBER [<user@AAD-tenant-domain>];\\r\\n```\\r\\n\\r\\nExample:\\r\\n![](../static/img/SQLAzureWithoutSecrets/AddingUser.jpg)\\r\\n\\r\\n> Note: You can do this at the server level, or at the database level. If you do it at the server level, the user will have access to all the databases in the server. If you do it at the database level, the user will only have access to that database.\\r\\n\\r\\nAs mentioned you can also use managed identities and service principals. Here is an example of how it looks like when using a managed identity:\\r\\n\\r\\n![](../static/img/SQLAzureWithoutSecrets/ManagedIdentity.jpg)\\r\\n\\r\\nHere is an example of the query you need to run to create the user from a managed identity and assign it a role, in this case db_datareader:\\r\\n\\r\\n```sql\\r\\nCREATE USER [name-of-the-object] FROM EXTERNAL PROVIDER;\\r\\nALTER ROLE db_datareader ADD MEMBER [name-of-the-object];\\r\\n```\\r\\n\\r\\nExample:\\r\\n![](../static/img/SQLAzureWithoutSecrets/AddingManagedIdentity.jpg)\\r\\n\\r\\n## Connecting to SQL Azure using Azure Active Directory\\r\\n\\r\\nNow that we have Azure Active Directory authentication enabled on SQL Azure, and we have added users and assigned permissions, we can connect to SQL Azure using Azure Active Directory.\\r\\n\\r\\nThe connectiong string looks like this:\\r\\n\\r\\n```csharp\\r\\nServer=tcp;<your-server>.database.windows.net,1433;Initial Catalog=<your-database>;Authentication=Active Directory Managed Identity;\\r\\n```\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nYour connections to SQL Azure are now more secure and without using secrets by using Azure Active Directory.\\r\\n\\r\\n## References\\r\\n\\r\\n- [SQL Azure - Using Azure Active Directory Authentication](https://docs.microsoft.com/azure/azure-sql/database/authentication-aad-overview?WT.mc_id=DT-MVP-5005361)"},{"id":"days-work-items-open","metadata":{"permalink":"/blog/days-work-items-open","source":"@site/blog/2023-05-05-DaysOpenWorkItemsADO.mdx","title":"How many days work items have been open in Azure Boards","description":"In this post, I will show you how to get how many days work items have been open in Azure Boards.","date":"2023-05-05T18:00:00.000Z","formattedDate":"May 5, 2023","tags":[{"label":"Azure DevOps","permalink":"/blog/tags/azure-dev-ops"},{"label":"Azure Boards","permalink":"/blog/tags/azure-boards"},{"label":"Work Items","permalink":"/blog/tags/work-items"}],"readingTime":4.3,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"How many days work items have been open in Azure Boards","description":"In this post, I will show you how to get how many days work items have been open in Azure Boards.","slug":"days-work-items-open","authors":["dsanchezcr"],"tags":["Azure DevOps","Azure Boards","Work Items"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/daysworkitemopen.jpg","date":"2023-05-05T18:00"},"unlisted":false,"prevItem":{"title":"Connecting to SQL Azure without Secrets","permalink":"/blog/SQL-Azure-Without-Secrets"},"nextItem":{"title":"Verified Commits in GitHub","permalink":"/blog/verified-commits-in-github"}},"content":"Depending on how your team tracks the work, they may want to know how many days a work item has been open. For example, if you have a work item that has been open for a long time, you may want to close it or prioritize it.\\r\\n\\r\\nIn this post, I will show you how to get how many days work items have been open in Azure Boards.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nThere are different ways to accomplish this, in this post, I will cover two ways of how to do it, the first one is using the Azure Boards analytics views to get a report in Power BI and the second one is by adding a custom field in your current process that will be updated daily automatically with an Azure Logic App or Power Automate workflow.\\r\\n\\r\\n## Using Azure Boards Analytics\\r\\n\\r\\nThe first option is to use the Azure Boards Analytics views to get the information and then create a report in Power BI.\\r\\n\\r\\n### Create the Analytics view\\r\\n\\r\\nTo create the Analytics view, go to the Analytics views in the Azure DevOps portal and click on the new view button. Then, select the Work Items option, add, or remove the fields that you need and make sure to add the Created Date. Click on the Continue button.\\r\\n\\r\\n![](../static/img/DaysOpenADO/new-view.jpg)\\r\\n\\r\\nIn the previous screen you can also filter the work items that you do not need, for example where the state is Closed.  \\r\\n\\r\\n![](../static/img/DaysOpenADO/filter.jpg)\\r\\n\\r\\nIn the next screen, select the History that you need to get, you can also exclude the work items that were completed before a given date.\\r\\n\\r\\n![](../static/img/DaysOpenADO/history.jpg)\\r\\n\\r\\nThen you can select the filters that you want to apply to the view, in this case, since this is a test project, I selected all history, and you can see the warning message on top about the amount of data. In this section you can also exclude the work items that were completed before the date that you choose.\\r\\n\\r\\nOnce the view is verified and created, we are ready to open Power BI, in my case I used the Power BI Desktop application.\\r\\n\\r\\n### Create the Power BI report\\r\\n\\r\\nIn Power BI, click on the Get Data button and select the Azure DevOps option. \\r\\n\\r\\nThen, enter the URL of your Azure DevOps organization, team project and select the Analytics view that you created in the previous step then click on Load the data.\\r\\n\\r\\nNext, you need to select the columns that you would like to see in your report, in my case I selected the Work Item Id, Title, State and Created Date.\\r\\n\\r\\nAs a filter you can select the status that you only want, in my case I removed the Resolved work items. Then create a new column to calculate the days open, in my case I used the following formula:\\r\\n\\r\\n```\\r\\nDaysOpen = DATEDIFF(DaysOpen[Created Date],TODAY(),DAY)\\r\\n```\\r\\n\\r\\nOnce the new column is created, you just need to add it to the report, and you will see the days open for each work item.\\r\\n\\r\\n![](../static/img/DaysOpenADO/powerbi.jpg)\\r\\n\\r\\n## Using a custom field\\r\\n\\r\\nThe second option is to add a custom field in your current process that will be updated daily automatically with an Azure Logic App or Power Automate workflow.\\r\\n\\r\\n### Create the custom field\\r\\n\\r\\nTo create the custom field, go to the Process section in the Azure DevOps portal and select the process that you want to update. Then, click on the Work item types option and select the work item type that you want to update, in this case, I selected the User Story work item type.\\r\\n\\r\\n>    - If your current process is a default process, you will need to create a new inherited process and then update the work item types.\\r\\n>    - You will need to do this with all the work item types that you want to update.\\r\\n\\r\\nAdd the new field to the work item type, in this case, I added the Days Open field as Integer to the Classification section.\\r\\n\\r\\n![](../static/img/DaysOpenADO/user-story.jpg)\\r\\n\\r\\n> Remember to update the process if you created an inherited process.\\r\\n\\r\\n> ![](../static/img/DaysOpenADO/change-process.jpg)\\r\\n\\r\\nOnce the process is updated with the custom field, I created a new query to get the work items (user stories in this case) that are not closed or resolved.\\r\\n\\r\\n![](../static/img/DaysOpenADO/query-user-stories.jpg)\\r\\n\\r\\n### Create the Logic App\\r\\n\\r\\nIn the Azure Portal, create the Azure Logic App and add a Recurrence trigger to run the workflow daily.\\r\\n\\r\\nI created a variable to store the Created Date for each Work Item. Since I created a query in Azure Boards, I used the \'Get Query Results\' action to get the work items that are not closed or resolved. (You can get up to 20,000 work items)\\r\\n\\r\\nThen, in a for each loop, I used the \'Update Work Item\' action to set the custom field \'Days Open\' with the following formula:\\r\\n\\r\\n```\\r\\ndiv(sub(ticks(utcNow()), ticks(variables(\'CreatedDate\'))), 864000000000)\\r\\n```\\r\\n\\r\\n![](../static/img/DaysOpenADO/logic-app.jpg)\\r\\n\\r\\nOnce the Logic App ran, you can see the Days Open field updated in the work items.\\r\\n\\r\\n![](../static/img/DaysOpenADO/query-results.jpg)\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nIn this post, I showed you how to get how many days work items have been open in Azure Boards. I hope you find this post useful!"},{"id":"verified-commits-in-github","metadata":{"permalink":"/blog/verified-commits-in-github","source":"@site/blog/2023-04-25-GHVerifiedCommits.mdx","title":"Verified Commits in GitHub","description":"In this post, I will show you how to verify commits in GitHub using GPG keys.","date":"2023-04-25T18:00:00.000Z","formattedDate":"April 25, 2023","tags":[{"label":"Github","permalink":"/blog/tags/github"},{"label":"Git","permalink":"/blog/tags/git"}],"readingTime":1.79,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"Verified Commits in GitHub","description":"In this post, I will show you how to verify commits in GitHub using GPG keys.","slug":"verified-commits-in-github","authors":["dsanchezcr"],"tags":["Github","Git"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/GHVerifiedCommits/VerifiedCommits.jpg","date":"2023-04-25T18:00"},"unlisted":false,"prevItem":{"title":"How many days work items have been open in Azure Boards","permalink":"/blog/days-work-items-open"},"nextItem":{"title":"Building a simple contact form","permalink":"/blog/building-a-contact-form-with-azure"}},"content":"A commit is a code change that is made to a repository. When a developer makes a commit, it is important to ensure that the code changes are made by an authorized person and that the changes have not been tampered with. This is where GitHub verified commits come in. This is useful to prevent impersonation and to ensure that the code you are downloading is the code that was uploaded by the developer.\\r\\n\x3c!--truncate--\x3e\\r\\nGitHub verified commits use digital signatures to ensure the authenticity of code changes. When a developer makes a commit, they can sign the commit using their GPG (GNU Privacy Guard) key. This key is a unique identifier that is used to verify the authenticity of the code changes. Once the commit is signed, GitHub will display a green \\"verified\\" badge next to the commit. Like this:\\r\\n\\r\\n![](../static/img/GHVerifiedCommits/VerifiedCommits.jpg)\\r\\n\\r\\nTo use GitHub verified commits, developers must first generate a GPG key. This key is a type of encryption key that is used to sign and verify digital signatures. \\r\\n\\r\\nOnce the key is generated, it can be uploaded to GitHub and used to sign commits.\\r\\n\\r\\nTo generate a GPG key, you will need to install GPG on your computer. There are different ways to generate the key, in my case I did using [Gpg4win](https://www.gpg4win.org) but you can also do it using the command line with the following command:\\r\\n\\r\\n```bash\\r\\ngpg --full-generate-key\\r\\n```\\r\\n\\r\\nIn my case I did it using Kleopatra, which is a certificate manager and GUI for GnuPG:\\r\\n\\r\\n![](../static/img/GHVerifiedCommits/Kleopatra.jpg)\\r\\n\\r\\nOnce you have the key, you can export it and upload it to GitHub. In settings, go to SSH and GPG keys and click on New GPG key:\\r\\n\\r\\n![](../static/img/GHVerifiedCommits/GHSettingsGPG.jpg)\\r\\n\\r\\nThen you need to configure your git client to use the key. In my case, this is how I did it:\\r\\n\\r\\n```bash\\r\\ngit config --global user.signingkey <your key id>\\r\\ngit config --global commit.gpgsign true\\r\\n```\\r\\n\\r\\n![](../static/img/GHVerifiedCommits/GitConfig.jpg)\\r\\n\\r\\nNow you can make a commit and sign it using the following command or the [GitHub Desktop](https://desktop.github.com) client.\\r\\n\\r\\n```bash\\r\\ngit commit -S -m \\"Your commit message\\"\\r\\n```\\r\\n\\r\\nAnd that\'s it, now GitHub will show the verified badge next to your commit."},{"id":"building-a-contact-form-with-azure","metadata":{"permalink":"/blog/building-a-contact-form-with-azure","source":"@site/blog/2023-04-23-BuildContactForm.mdx","title":"Building a simple contact form","description":"In this post, we will build a contact form with Azure Functions and Azure Communication Services.","date":"2023-04-23T18:00:00.000Z","formattedDate":"April 23, 2023","tags":[{"label":"Azure Functions","permalink":"/blog/tags/azure-functions"},{"label":"GitHub Actions","permalink":"/blog/tags/git-hub-actions"},{"label":"Azure Communication Services","permalink":"/blog/tags/azure-communication-services"},{"label":"Azure Static Web Apps","permalink":"/blog/tags/azure-static-web-apps"}],"readingTime":4.105,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"Building a simple contact form","description":"In this post, we will build a contact form with Azure Functions and Azure Communication Services.","slug":"building-a-contact-form-with-azure","authors":["dsanchezcr"],"tags":["Azure Functions","GitHub Actions","Azure Communication Services","Azure Static Web Apps"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/BuiltContactForm/ContactForm.jpg","date":"2023-04-23T18:00"},"unlisted":false,"prevItem":{"title":"Verified Commits in GitHub","permalink":"/blog/verified-commits-in-github"},"nextItem":{"title":"Azure DevOps to GitHub \u2013 Repo Migration","permalink":"/blog/azure-devops-to-github-repo-migration"}},"content":"In this post, we will build a contact form with Azure Functions and Azure Communication Services.\\r\\n\x3c!--truncate--\x3e\\r\\n## Introduction\\r\\n\\r\\nHaving a functional contact form on your website is essential. A contact form is a simple yet effective way to receive inquiries and feedback from your visitors, customers, or clients. In this blog post, I will share my experience in building a contact form using Azure Functions and Azure Communication Service\'s Email Service.\\r\\n\\r\\n## Why Azure Functions?\\r\\n\\r\\n[Azure Functions](https://learn.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=DT-MVP-5005361) is a serverless computing service offered by Microsoft Azure. It allows developers to build, run, and scale applications without having to manage infrastructure. Azure Functions support multiple programming languages, including C#, Java, JavaScript, Python, and PowerShell.\\r\\n\\r\\nIn this case my website is running on a static web app, so I need to use a serverless solution to build the contact form. Azure Functions is a great option because it allows me to build a contact form without having to manage infrastructure or worry about the complexities of communication protocols.\\r\\n\\r\\n## What is Azure Communication Service?\\r\\n\\r\\n[Azure Communication Service](https://learn.microsoft.com/azure/communication-services/overview?WT.mc_id=DT-MVP-5005361) is a communication platform offered by Microsoft Azure. It provides developers with the tools and services to integrate real-time communication features such as voice, video, chat, and SMS messaging into their applications. Azure Communication Service also offers an [Email Service](https://learn.microsoft.com/azure/communication-services/concepts/email/email-overview) that allows developers to send and receive emails programmatically.\\r\\n\\r\\n## Building the Contact Form using Azure Functions and Azure Communication Service\\r\\n\\r\\nTo build a contact form using Azure Functions and Azure Communication Service\'s Email Service, I followed these steps:\\r\\n\\r\\n#### 1. Create the Azure resources\\r\\n\\r\\nThe first step was to create the Azure resources. These are the resouces that I used in this sample application:\\r\\n\\r\\n- [Azure Communication Service](https://learn.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?WT.mc_id=DT-MVP-5005361) - to manage the Email service.\\r\\n- [Azure Email Service (Part of Azure Communication Service)](https://learn.microsoft.com/azure/communication-services/quickstarts/email/create-email-communication-resource?WT.mc_id=DT-MVP-5005361) - to send emails.\\r\\n- [Azure Function](https://learn.microsoft.com/azure/azure-functions/functions-create-first-function-vs-code?pivots=programming-language-csharp?WT.mc_id=DT-MVP-5005361) - to process the HTTP trigger sent by the HTML and send the emails using Azure Communication Service.\\r\\n- [Azure Static Web App](https://learn.microsoft.com/azure/static-web-apps/getting-started?WT.mc_id=DT-MVP-5005361) - to host the website (Index.html in this case).\\r\\n\\r\\n![](../static/img/BuiltContactForm/AzureResourceVisualizer.jpg)\\r\\n\\r\\n#### 2. Configure the Azure Communication Services - Email Service\\r\\n\\r\\nThe next step was to configure the Azure Communication Services - Email Service. This includes setting up an email address to send emails. When you create this service you can choose if you want to use an Azure subdomain or if you want to setup your own domain.\\r\\n\\r\\n![](../static/img/BuiltContactForm/AzureEmailCommunicationService.jpg)\\r\\n\\r\\nIn this case, I used the email address provisioned by an Azure subdomain. \\r\\n\\r\\n![](../static/img/BuiltContactForm/DomainProvision.jpg)\\r\\n\\r\\nThe email address was created and configured automatically:\\r\\n\\r\\n![](../static/img/BuiltContactForm/EmailCommunicationService.jpg)\\r\\n\\r\\n\\r\\n#### 3. Develop the Azure Function\\r\\n\\r\\nThe first step was to create an Azure Function. You can choose from various templates based on the programming language of your choice. In this case, I used the VS Code to create the C# Azure Function with a HTTP trigger. The Function sends two emails, one to notify the website owner and another one to notify the user who sends the message through the website to let me know that their message was sent. \\r\\n\\r\\n> To call the Azure Function, it is required to send three parameters: `name`, `email`, and `message`. \\r\\nAlso, the Function is using three environment variables that you need to create in the Azure Function configuration: \\r\\n- `myEmailAddress`: to notify the website owner that a new message has been received.\\r\\n- `senderEmailAddress`: the email address that was provisioned in the Azure Communication Service configuration.\\r\\n- `AzureCommunicationServicesConnectionString`: the connection string that was provisioned in the Azure Communication Service configuration.\\r\\n\\r\\nThe [EmailClient](https://learn.microsoft.com/dotnet/api/azure.communication.email.emailclient?view=azure-dotnet&WT.mc_id=DT-MVP-5005361) class is used to send emails using the Azure Communication Service Email Service and it is initialized with the connection string.\\r\\n\\r\\nThe following code snippet shows the HTTP trigger function:\\r\\n\\r\\n```c reference title=\\"Azure Function HTTP Trigger - SendEmails.cs\\"\\r\\nhttps://github.com/dsanchezcr/ContactFormWithAzure/blob/9f619eb2c8d41e45574557dbf3c2f95486391d30/api/SendEmails.cs#L17-L57\\r\\n```\\r\\n\\r\\n#### 4. Develop the front end\\r\\n\\r\\nIn my case I created a simple HTML file and added the necessary form fields for the contact form, name, email, and message.\\r\\n\\r\\n```html reference title=\\"Form to send the email\\"\\r\\nhttps://github.com/dsanchezcr/ContactFormWithAzure/blob/9f619eb2c8d41e45574557dbf3c2f95486391d30/Index.html#L123-L137\\r\\n```\\r\\n\\r\\nHere is the JavaScript code that I used to process the call to Azure Function:\\r\\n\\r\\n```javascript reference title=\\"JavaScript code to call the Azure Function\\"\\r\\nhttps://github.com/dsanchezcr/ContactFormWithAzure/blob/9f619eb2c8d41e45574557dbf3c2f95486391d30/Index.html#L8-L32\\r\\n```\\r\\n\\r\\n#### 5. GitHub Actions to build and deploy the solution\\r\\n\\r\\nI created a GitHub Action to build and deploy the Azure Function and the website. The following code snippet shows the GitHub Action:\\r\\n\\r\\n```yaml reference title=\\"GitHub Action to build and deploy the solution\\"\\r\\nhttps://github.com/dsanchezcr/ContactFormWithAzure/blob/9f619eb2c8d41e45574557dbf3c2f95486391d30/.github/workflows/main_contactformwithazure.yml#L1-L45\\r\\n```\\r\\n\\r\\n> The GitHub Action is using two secrets that you need to configure:\\r\\n- `AZUREAPPSERVICE_PUBLISHPROFILE`: the publish profile of the Azure Function.\\r\\n- `AZURE_STATIC_WEB_APPS_API_TOKEN`: the API token of the Azure Static Web App.\\r\\n\\r\\n## Testing the solution\\r\\n\\r\\nI tested the solution by sending a message from the contact form. The following image shows the email that was sent to the website owner and the email that was sent to the user who posted the message.\\r\\n\\r\\n![](../static/img/BuiltContactForm/ContactFormResult.jpg)\\r\\n\\r\\nYou can try the solution [here](https://purple-sky-05cd51e0f.3.azurestaticapps.net/Index.html).\\r\\n\\r\\nAnd check out my production contact form [here](https://dsanchezcr.com/contact)."},{"id":"azure-devops-to-github-repo-migration","metadata":{"permalink":"/blog/azure-devops-to-github-repo-migration","source":"@site/blog/2023-04-14-ADOGHRepoMigration.mdx","title":"Azure DevOps to GitHub \u2013 Repo Migration","description":"Migrating a repository from one platform to another can be a challenging task, but with the right tools and guidance, it can be a straightforward process.","date":"2023-04-14T12:00:00.000Z","formattedDate":"April 14, 2023","tags":[{"label":"Azure DevOps","permalink":"/blog/tags/azure-dev-ops"},{"label":"GitHub","permalink":"/blog/tags/git-hub"},{"label":"Migration","permalink":"/blog/tags/migration"}],"readingTime":1.635,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"Azure DevOps to GitHub \u2013 Repo Migration","description":"Migrating a repository from one platform to another can be a challenging task, but with the right tools and guidance, it can be a straightforward process.","slug":"azure-devops-to-github-repo-migration","authors":["dsanchezcr"],"tags":["Azure DevOps","GitHub","Migration"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/ADOGHRepoMigration/ADOtoGH.jpg","date":"2023-04-14T12:00"},"unlisted":false,"prevItem":{"title":"Building a simple contact form","permalink":"/blog/building-a-contact-form-with-azure"},"nextItem":{"title":"List repositories with their sizes in Azure Repos","permalink":"/blog/list-azure-repos-with-sizes"}},"content":"Migrating a repository from one platform to another can be a challenging task, but with the right tools and guidance, it can be a straightforward process. We\'ll guide you through the steps to migrate a repository from Azure DevOps to GitHub using the import code option.\\r\\n\x3c!--truncate--\x3e\\r\\n## 1. Locate the repository in Azure DevOps.\\r\\n\\r\\nWe used the [Azure DevOps Demo Generator](https://azuredevopsdemogenerator.azurewebsites.net) to create a sample project with multiple repositories that contain multiple branches. We will start the migration with the [TailwindTraders-Backend](https://github.com/microsoft/tailwindTraders-backend) repository.\\r\\n\\r\\n![](../static/img/ADOGHRepoMigration/ADORepo.png)\\r\\n\\r\\n## 2. Create a new repository in GitHub.\\r\\n\\r\\nGo to your GitHub account or organization and click on the \\"New repository\\" button. Give your repository a name and description and choose the appropriate visibility settings. \\r\\nIn this case we are using the following naming structure: ```<ADOProjectName>.<ADORepoName>```.\\r\\n\\r\\n![](../static/img/ADOGHRepoMigration/GHRepo.png)\\r\\n\\r\\n## 3. Import the repository to GitHub.\\r\\n\\r\\nNow that you have your new GitHub repository, it\'s time to import your repository to GitHub. To do this, go to your new GitHub repository and click on the \\"Import code\\" button. \\r\\n\\r\\nIn the \\"Your old repository\'s clone URL\\" field, enter the URL you found in your Azure DevOps repository in Step 1. Click \u201cBegin Import\u201d\\r\\n\\r\\n![](../static/img/ADOGHRepoMigration/ADORepoURL.png)\\r\\n\\r\\n![](../static/img/ADOGHRepoMigration/GHImportCode.png)\\r\\n\\r\\n![](../static/img/ADOGHRepoMigration/GHImportRepo.png)\\r\\n\\r\\n## 4. Authenticate to your Azure DevOps project.\\r\\n\\r\\nTo authenticate to Azure DevOps, you can use a [personal access token](https://learn.microsoft.com/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?WT.mc_id=DT-MVP-5005361&view=azure-devops&tabs=Windows#create-a-pat) with read access to code. And enter your username and PAT in GitHub, then click \u201cSubmit\u201d.\\r\\n\\r\\n![](../static/img/ADOGHRepoMigration/ADOPAT.png)\\r\\n\\r\\n![](../static/img/ADOGHRepoMigration/GHAuth.png)\\r\\n\\r\\nDepending on the size of your repository, the import process can take some time. You\'ll receive an email notification once the import process is complete. \\r\\n\\r\\n![](../static/img/ADOGHRepoMigration/GHMigration.png)\\r\\n\\r\\n## 5. Verify your repository in GitHub.\\r\\n\\r\\nOnce the import process is complete, go to your new GitHub repository and verify that all your branches, tags, and commits have been imported correctly. You can also check that your repository\'s history has been preserved by looking at the commit history.\\r\\n\\r\\n![](../static/img/ADOGHRepoMigration/RepoMigrated.png)\\r\\n\\r\\nCongratulations! You\'ve successfully migrated your repository from Azure DevOps to GitHub using the import code option."},{"id":"list-azure-repos-with-sizes","metadata":{"permalink":"/blog/list-azure-repos-with-sizes","source":"@site/blog/2023-02-28-ListReposADO.mdx","title":"List repositories with their sizes in Azure Repos","description":"Learn how to list your Azure Repos with their sizes using PowerShell.","date":"2023-02-28T18:00:00.000Z","formattedDate":"February 28, 2023","tags":[{"label":"Azure DevOps","permalink":"/blog/tags/azure-dev-ops"},{"label":"PowerShell","permalink":"/blog/tags/power-shell"}],"readingTime":1.09,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"List repositories with their sizes in Azure Repos","description":"Learn how to list your Azure Repos with their sizes using PowerShell.","slug":"list-azure-repos-with-sizes","authors":["dsanchezcr"],"tags":["Azure DevOps","PowerShell"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/ListADORepos/ListADORepos.png","date":"2023-02-28T18:00"},"unlisted":false,"prevItem":{"title":"Azure DevOps to GitHub \u2013 Repo Migration","permalink":"/blog/azure-devops-to-github-repo-migration"},"nextItem":{"title":"Cost Savings with Azure for your Web Apps","permalink":"/blog/cost-savings-with-azure"}},"content":"In this short post, I will show you how to list the Azure Repos in an Azure DevOps Project with their sizes in MB using a PowerShell script.\\r\\n\x3c!--truncate--\x3e\\r\\nTo follow this post, you will need to create a Personal Access Token (PAT) with the **Code (read)** permission. You can read more about PAT in the [official documentation](https://learn.microsoft.com/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate).\\r\\n\\r\\n```powershell\\r\\n$DevOpsServerName = \\"<YOUR AZURE DEVOPS SERVER NAME>\\"\\r\\n$ProjectCollection = \\"<YOUR PROJECT COLLECTION NAME>\\"\\r\\n$Project = \\"<YOUR PROJECT NAME>\\"\\r\\n$PAT = \\"<YOUR PERSONAL ACCESS TOKEN>\\"\\r\\n\\r\\n$baseUrl = https://$DevOpsServerName/$ProjectCollection/$Project/_apis/git/repositories?includeLinks={includeLinks}&includeAllUrls={includeAllUrls}&includeHidden={includeHidden}&api-version=6.0\\r\\n$base64AuthInfo= [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(\\":$($PAT)\\"))\\r\\n$headers = @{Authorization=(\\"Basic {0}\\" -f $base64AuthInfo)}\\r\\n$repositories = Invoke-RestMethod -Uri $baseUrl -Method Get -Headers $headers\\r\\n\\r\\nforeach ($repo in $repositories.value) {\\r\\n    $repoName = $repo.name\\r\\n    $repoSize = [math]::Round(($repo.size / 1MB),2) \\r\\n    \\r\\n    Write-Output \\"$repoName $repoSize MB\\"\\r\\n} \\r\\n```\\r\\n\\r\\nHere is an example of the output of that script:\\r\\n```powershell\\r\\nTailwind Traders 10.65 MB\\r\\nTailwindTraders-Backend 28.45 MB\\r\\nTailwindTraders-Website 14.04 MB \\r\\n```\\r\\n\\r\\nThe script above use the Azure DevOps Rest API to get the repositories and their sizes. You can read more about the API in the [official documentation](https://docs.microsoft.com/rest/api/azure/devops/git/repositories/list?WT.mc_id=DT-MVP-5005361).\\r\\n\\r\\nThis is helpful to know the size of your repositories in case you are planning to do a migration, or in case you would like to know if you have large files, and to know if you need to clean up some of them.\\r\\n\\r\\nHope this helps!"},{"id":"cost-savings-with-azure","metadata":{"permalink":"/blog/cost-savings-with-azure","source":"@site/blog/2023-01-03-CostSavingAzure.mdx","title":"Cost Savings with Azure for your Web Apps","description":"Learn how to optimize what you pay in Azure for your Web Apps with PaaS.","date":"2023-01-04T18:00:00.000Z","formattedDate":"January 4, 2023","tags":[{"label":"Azure","permalink":"/blog/tags/azure"},{"label":"Cost Savings","permalink":"/blog/tags/cost-savings"},{"label":"Web Apps","permalink":"/blog/tags/web-apps"},{"label":"SQL Azure","permalink":"/blog/tags/sql-azure"}],"readingTime":4.17,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"Cost Savings with Azure for your Web Apps","description":"Learn how to optimize what you pay in Azure for your Web Apps with PaaS.","slug":"cost-savings-with-azure","authors":["dsanchezcr"],"tags":["Azure","Cost Savings","Web Apps","SQL Azure"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/CostSavings/Automation.jpg","date":"2023-01-04T18:00"},"unlisted":false,"prevItem":{"title":"List repositories with their sizes in Azure Repos","permalink":"/blog/list-azure-repos-with-sizes"},"nextItem":{"title":"Adding Load Testing to your CI/CD workflows","permalink":"/blog/adding-load-testing-to-your-workflows"}},"content":"## Introduction\\r\\n\\r\\nMany of our web app hosted on Azure are built on top of a PaaS service, such as Azure App Service and SQL Azure. These services are usually billed based on the amount of resources they consume. The more resources they consume, the more we pay. However, there are some best practices that we can follow to reduce the amount of resources consumed and, therefore, reduce the amount of money we pay. Specially if we are running a web app that is not used 24/7 or just used during business hours in the same time zone.\\r\\n\x3c!--truncate--\x3e\\r\\nOne of the cloud computing principles is the **elasticity**, meaning that we can scale up or down the resources that our app consumes based on the demand or schedule. This is a great feature of the cloud, but we should be aware of the cost implications of this feature. If we scale up our app to handle a peak of traffic, we should also scale down the resources when the traffic is back to normal.\\r\\n\\r\\nIn Azure App Service we have two ways to scale, scale up or down and scale out or in. Scale up or down means that we can change the size of the VM that our app is running on. Scale out or in means that we can add or remove VMs from our app. We can scale up or down and scale out or in at the same time. For example, we can scale up the size of the VMs and add more VMs to our app. \\r\\n\\r\\nSo if we have a production Web App that is not used 24/7, we should consider the following:\\r\\n\\r\\n- Scale down the app and database to the minimum resources needed during off-peak hours.\\r\\n- Scale up the app and database to the maximum resources needed during peak hours. (in addition, we should enable auto-scaling to scale out the app and add more instances when needed, [through the rules that you define to scale out or in](https://learn.microsoft.com/azure/azure-monitor/autoscale/autoscale-get-started?WT.mc_id=DT-MVP-5005361&toc=%2Fazure%2Fapp-service%2Ftoc.json#create-your-first-autoscale-setting)).\\r\\n\\r\\nThe process to scale up and down can be down manually from the portal as shown in the image.\\r\\n\\r\\n![](../static/img/CostSavings/AzurePortal-ScaleUp.jpg)\\r\\n\\r\\nHowever, this process can be tedious and error-prone. We can automate the process to scale up and down the Web App and the database during the night and weekends. This will reduce the amount of resources consumed and, therefore, reduce the amount of money we pay.\\r\\n\\r\\n## Solution\\r\\n\\r\\nWe can use [Azure Automation](https://learn.microsoft.com/azure/automation/overview?WT.mc_id=DT-MVP-5005361) service to schedule a PowerShell script to scale down the Web App and the DB during the night and weekends. We can also schedule another PowerShell script to scale up the Web App and the DB during before the business hours.\\r\\n\\r\\n> You will need to setup an System Assigned Identity to the Azure Automation account to connect with the Azure Resources. You can follow the steps in this [article](https://learn.microsoft.com/azure/automation/learn/powershell-runbook-managed-identity?WT.mc_id=DT-MVP-5005361#assign-permissions-to-managed-identities).\\r\\n\\r\\nLet\'s explore the PowerShell scripts that we can use:\\r\\n\\r\\n### Scale Up or Down the Web App\\r\\n\\r\\n```powershell\\r\\n$resourceGroupName = \'<Your Resource Group>\'\\r\\n$appServicePlanName = \'<Your App Service>\'\\r\\n$tier = \'<Tier you would like to scale down - For example: Basic>\'\\r\\ntry\\r\\n{\\r\\n    filter timestamp {\\"[$(Get-Date -Format G)]: $_\\"}\\r\\n    Write-Output \\"Script started.\\" | timestamp\\r\\n    Write-Verbose \\"Logging in to Azure...\\" -Verbose\\r\\n    Connect-AzAccount -Identity\\r\\n    Write-Verbose \\"Login sucessful. Proceding to update service plan...\\" -Verbose\\r\\n    Set-AzAppServicePlan -ResourceGroupName $resourceGroupName -Name $appServicePlanName -tier $tier\\r\\n    Write-Verbose \\"Service plan updated. Getting information about the update...\\" -Verbose\\r\\n    $appPlanService = Get-AzAppServicePlan -ResourceGroupName $resourceGroupName -Name $appServicePlanName\\r\\n    Write-Output \\"App Service Plan name: $($appPlanService.Name)\\" | timestamp\\r\\n    Write-Output \\"Current App Service Plan status: $($appPlanService.Status), tier: $($appPlanService.Sku.Name)\\" | timestamp\\r\\n    Write-Output \\"Script finished.\\"\\r\\n}\\r\\ncatch {\\r\\n    Write-Verbose \\"Error... \'$_.Exception\'\\" -Verbose\\r\\n    Write-Error -Message $_.Exception\\r\\n    throw $_.Exception\\r\\n}\\r\\n```\\r\\n\\r\\n### Scale Up or Down the SQL Azure\\r\\n\\r\\n```powershell\\r\\n$resourceGroupName = \'<Your Resource Group>\'\\r\\n$SqlServerName = \'<Your SQL Azure Server Name>\'\\r\\n$DatabaseName = \'<Your SQL Azure DB Name>\'\\r\\n$Edition = \'<Tier you would like to scale down - For example: Basic>\'\\r\\n$PerfLevel = \'<Tier you would like to scale down - For example: Basic>\'\\r\\ntry{\\r\\n    filter timestamp {\\"[$(Get-Date -Format G)]: $_\\"}\\r\\n    Write-Output \\"Script started.\\" | timestamp\\r\\n    Write-Verbose \\"Logging in to Azure...\\" -Verbose\\r\\n    Connect-AzAccount -Identity  \\r\\n    Write-Verbose \\"Login sucessful. Proceding to update SQL Server plan...\\" -Verbose\\r\\n    Set-AzSqlDatabase -ResourceGroupName $resourceGroupName -DatabaseName $DatabaseName -ServerName $SqlServerName -Edition $Edition -RequestedServiceObjectiveName $PerfLevel \\r\\n    Write-Verbose \\"SQL Server plan updated. Getting information about the update...\\" -Verbose\\r\\n    $sqlServerPlan = Get-AzSqlDatabase -ResourceGroupName $resourceGroupName -DatabaseName $DatabaseName -ServerName $SqlServerName\\r\\n    Write-Output \\"SQL Server Edition: $($sqlServerPlan.Edition)\\" | timestamp\\r\\n    Write-Output \\"Current SQL Server Plan status: $($sqlServerPlan.Status)\\" | timestamp\\r\\n    Write-Output \\"Script finished.\\"\\r\\n}\\r\\ncatch{\\r\\n    Write-Verbose \\"Error... \'$_.Exception\'\\" -Verbose\\r\\n    Write-Error -Message $_.Exception\\r\\n    throw $_.Exception\\r\\n}\\r\\n```\\r\\n\\r\\nOnce you create the Runbooks in Azure Automation you can create the schedules and linke the Runbooks to the schedules.\\r\\n\\r\\n![](../static/img/CostSavings/Automation.jpg)\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nWe have seen how we can use Azure Automation and PowerShell to schedule the scaling up or down of the Web App and the SQL Azure. This will help us to save money and also to avoid the downtime during the business hours by adding the resources we do not use at night."},{"id":"adding-load-testing-to-your-workflows","metadata":{"permalink":"/blog/adding-load-testing-to-your-workflows","source":"@site/blog/2022-12-21-LoadTesting.mdx","title":"Adding Load Testing to your CI/CD workflows","description":"Learn about Azure Load Testing and how to include it in your GitHub Actions.","date":"2022-12-21T18:00:00.000Z","formattedDate":"December 21, 2022","tags":[{"label":"Azure","permalink":"/blog/tags/azure"},{"label":"Load Testing","permalink":"/blog/tags/load-testing"},{"label":"GitHub Actions","permalink":"/blog/tags/git-hub-actions"}],"readingTime":4.63,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"Adding Load Testing to your CI/CD workflows","description":"Learn about Azure Load Testing and how to include it in your GitHub Actions.","slug":"adding-load-testing-to-your-workflows","authors":["dsanchezcr"],"tags":["Azure","Load Testing","GitHub Actions"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/LoadTesting/LoadTestingWebApp.jpg","date":"2022-12-21T18:00"},"unlisted":false,"prevItem":{"title":"Cost Savings with Azure for your Web Apps","permalink":"/blog/cost-savings-with-azure"},"nextItem":{"title":"Webinar - From Code to Cloud in a secure way with GitHub Advanced Security","permalink":"/blog/Webinar-GHAS"}},"content":"#### [Duplicate from Xpirit Blog Post](https://xpirit.com/adding-load-testing-to-your-workflows)\\r\\n\x3c!--truncate--\x3e\\r\\n## Introduction\\r\\nLoad testing is a technique that focuses on evaluating the performance of an application under normal or expected load conditions. The goal is to determine how the application behaves when it is subjected to the expected levels of usage and traffic. Load testing is often used to verify that a system can handle the expected number of users and transactions, and to identify any performance bottlenecks or issues that may impact the user experience.\\r\\n\\r\\nMicrosoft Azure offers a new service (on preview), called [Azure Load Testing](https://azure.microsoft.com/products/load-testing). One of the key benefits of using this service is that it allows you to test your application\'s performance at a scale without having to invest in expensive hardware and infrastructure. Additionally, it is highly configurable and can be used to test applications hosted on a variety of platforms, including Azure, on-premises servers, and third-party cloud providers.\\r\\n\\r\\n## What do we need?\\r\\nIn addition to an Azure Subscription, and a GitHub account, we will need an [Apache JMeter](https://jmeter.apache.org) script, which typically consists of a series of test elements, including thread groups, samplers, listeners, and assertions. The thread groups define the number and type of virtual users that will be simulated, while the samplers define the specific actions or requests that will be performed by the virtual users. The listeners capture the performance data generated by the test, and the assertions define the expected results of the test and verify that the actual results match the expectations.\\r\\n\\r\\n[Here you can find the script I created as part of this demo](https://raw.githubusercontent.com/dsanchezcr/LoadTestingDemo/main/LoadTestingScript.jmx)\\r\\n\\r\\n[![Here you can find the script I created as part of this demo](../static/img/LoadTesting/JMeterScript.jpg)](https://raw.githubusercontent.com/dsanchezcr/LoadTestingDemo/main/LoadTestingScript.jmx)\\r\\n\\r\\n## Getting Started\\r\\nIn the following example, we are going to use Azure Load Testing in our workflow from GitHub Actions to detect when our web app has reached a performance issue. We are going to define a load test scenario with a specific number and type of virtual users that will be simulated, as well as the test duration and the type of workload to be simulated, which in this case is just an HTTP Request. In addition, you can also use either Visual Studio or the Azure Portal to create and configure your load test scenario.\\r\\n\\r\\nOnce the load test scenario is defined, we can review the results and monitoring data, which includes metrics such as response time, CPU usage, and network traffic, as well as custom performance counters that we can define. With this data we identify bottlenecks and optimize the application\'s performance.\\r\\n\\r\\n### The scenario\\r\\nI developed a simple [Web App](https://loadtestingweb.azurewebsites.net) built with ASP.NET Core using .NET 7 that connects to an Azure Cosmos DB and adds a record of each visit to the page and retrieves the data from all the visits.\\r\\n\\r\\n[![Load Testing Sample Web App](../static/img/LoadTesting/LoadTestingWebApp.jpg)](https://loadtestingweb.azurewebsites.net)\\r\\n\\r\\n### The environment\\r\\nThis web app is running on an App Service <strong>Basic</strong> plan, and it has Applications Insights to monitor the performance of the application. The Cosmos DB is set with the <strong>free tier </strong>(1000 RU/s and 25 GB). I want to find out if the application running on this environment can support up to 100 concurrent users.\\r\\n\\r\\n![Azure Portal for Load Testing](../static/img/LoadTesting/AzurePortal.jpg)\\r\\n\\r\\n### The repository\\r\\nYou can check out the **GitHub repository** [here](https://github.com/dsanchezcr/LoadTestingDemo). There you can fork the repository, use the [ARM template](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fdsanchezcr%2FLoadTestingDemo%2Fmain%2FARM%2Ftemplate.json).\\r\\n\\r\\n\\r\\n> Note: Microsoft Azure only allows you to create one Cosmos DB Free Tier resource per subscription, you might get an error if you already have one Cosmos DB Free Tier in your subscription.\\r\\n\\r\\nThis repository has a [GitHub Action](https://github.com/dsanchezcr/LoadTestingDemo/actions/runs/3745714572) that Build & Deploy the application and run the Load Test in Azure Load Testing.\\r\\n\\r\\n[![GitHub Action Run for Load Testing](../static/img/LoadTesting/GitHubActionRun.jpg)](https://github.com/dsanchezcr/LoadTestingDemo/actions/runs/3745714572)\\r\\n\\r\\n### The GitHub Action\\r\\nThe [workflow](https://raw.githubusercontent.com/dsanchezcr/LoadTestingDemo/main/.github/workflows/workflow.yml) consists of three steps (Build, Deploy and Load Testing) and runs on every push. The Load Testing job uses the following files in the root folder:\\r\\n\\r\\n \\t- [LoadTestingScript.jmx](https://github.com/dsanchezcr/LoadTestingDemo/blob/main/LoadTestingScript.jmx)\\r\\n \\t- [LoadTestingConfig.yaml](https://github.com/dsanchezcr/LoadTestingDemo/blob/main/LoadTestingConfig.yaml)\\r\\n\\r\\nThe Azure login is required to communicate with the Azure Load Testing service to send the JMeter script and the configuration for the test. In this configuration we can define the number of [engines](https://learn.microsoft.com/azure/load-testing/concept-load-testing-concepts#test-engine) we want to run the test and the failure criteria, in this case we have an average response time lower than 5 seconds and error percentage lower than 20%.\\r\\n\\r\\n### The Results\\r\\nAs you can see in the image above, the Load Test <strong>failed</strong> because the average response time was higher than the threshold (5 seconds), we can get more details about the test run in the Azure Portal. [You can download the results here](https://raw.githubusercontent.com/dsanchezcr/LoadTestingDemo/main/engine1_results.csv).\\r\\n\\r\\n![Test Results from Azure Load Testing](../static/img/LoadTesting/TestResult.jpg)\\r\\n\\r\\nIn the Azure App Service, we can see the metrics with the response times (higher than 5 seconds) and the number of requests with the Data in and Data out. \\r\\n![Azure App Service Metrics](../static/img/LoadTesting/AppServiceMetrics.jpg)\\r\\n\\r\\nIn addition, I added Application Insights to monitor the web app, in the Azure Portal we can see the performance issues and failures.\\r\\n\\r\\n![Application Insights](../static/img/LoadTesting/AppInsightsPerformance.jpg)\\r\\n\\r\\nFrom the image above you can see where the requests came from, in this case I am running Azure Load Testing in the East US region (Virginia).\\r\\n\\r\\n![App Insights Failures](../static/img/LoadTesting/AppInsightsFailures.jpg)\\r\\n\\r\\n## Conclusions\\r\\nThe Load Testing <strong>should not be</strong> running on a production environment, try it on a QA or Pre-Production. Even if you are running on deployments slots, remember that the app will still run on the same App Service Plan, and this could affect your production environment or cause a [Denial-of-Service Attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\\r\\n\\r\\nIf you would like to learn more about Azure Load Testing, I recommend you review the [service documentation](https://learn.microsoft.com/azure/load-testing?WT.mc_id=DT-MVP-5005361)."},{"id":"Webinar-GHAS","metadata":{"permalink":"/blog/Webinar-GHAS","source":"@site/blog/2022-11-30-GHAS-Webinar.mdx","title":"Webinar - From Code to Cloud in a secure way with GitHub Advanced Security","description":"Today I had the opportunity to present a webinar about GHAS, check it out here.","date":"2022-11-30T18:00:00.000Z","formattedDate":"November 30, 2022","tags":[{"label":"Webinars","permalink":"/blog/tags/webinars"}],"readingTime":0.185,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"Webinar - From Code to Cloud in a secure way with GitHub Advanced Security","description":"Today I had the opportunity to present a webinar about GHAS, check it out here.","slug":"Webinar-GHAS","authors":["dsanchezcr"],"tags":["Webinars"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/Webinar-GHAS.jpg","date":"2022-11-30T18:00"},"unlisted":false,"prevItem":{"title":"Adding Load Testing to your CI/CD workflows","permalink":"/blog/adding-load-testing-to-your-workflows"},"nextItem":{"title":"Passed the GitHub Partner Certifications","permalink":"/blog/GitHub-Certifications"}},"content":"Today I had the opportunity to present a webinar about GHAS, check it out [here](https://youtu.be/16bYXX5xu6U).\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n[![Webinar - From Code to Cloud in a secure way with GitHub Advanced Security](../static/img/Webinar-GHAS.jpg)](https://youtu.be/16bYXX5xu6U)\\r\\n\\r\\n[You can get the PowerPoint Presentation here](https://1drv.ms/p/s!Av3VDVKKphCYuDIMtpQF_aop_7gE)."},{"id":"GitHub-Certifications","metadata":{"permalink":"/blog/GitHub-Certifications","source":"@site/blog/2022-11-06-GHCertifications.mdx","title":"Passed the GitHub Partner Certifications","description":"GitHub offers three certifications for Partners. I just passed the three exams to pass these certifications.","date":"2022-11-06T18:00:00.000Z","formattedDate":"November 6, 2022","tags":[{"label":"certifications","permalink":"/blog/tags/certifications"}],"readingTime":0.465,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"Passed the GitHub Partner Certifications","description":"GitHub offers three certifications for Partners. I just passed the three exams to pass these certifications.","slug":"GitHub-Certifications","authors":["dsanchezcr"],"tags":["certifications"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/GH-Certs.png","date":"2022-11-06T18:00"},"unlisted":false,"prevItem":{"title":"Webinar - From Code to Cloud in a secure way with GitHub Advanced Security","permalink":"/blog/Webinar-GHAS"},"nextItem":{"title":"I\'m joining Xpirit","permalink":"/blog/xpirit"}},"content":"I\'m thrilled to share that I just earned the three GitHub Partner Certifications.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nThe GitHub Partner Certifications are a set of three exams that cover the GitHub platform and its ecosystem. The exams are designed to test your knowledge of the GitHub. \\r\\n\\r\\nThe three exams are:\\r\\n- [GitHub Actions](https://credly.com/badges/e8a1a5a0-f95c-4bfd-b6cb-81ea1231153f)\\r\\n- [GitHub Admin](https://credly.com/badges/79b12418-8217-4c7b-a1a0-ad6f6cf407df)\\r\\n- [GitHub Advanced Security](https://credly.com/badges/b32ce8d3-d9e1-423c-8d1a-958901f3d798)\\r\\n\\r\\n[![GitHub Partner Certifications](../static/img/GH-Certs.png)](https://learn.microsoft.com/training/github?WT.mc_id=DT-MVP-5005361)\\r\\n\\r\\nThe [Microsoft Learn collections](https://learn.microsoft.com/training/github?WT.mc_id=DT-MVP-5005361) helped me a lot to prepare for the exams. I recommend you to check them out.\\r\\n\\r\\nI\'m looking forward to continue learning and sharing my knowledge with the community."},{"id":"xpirit","metadata":{"permalink":"/blog/xpirit","source":"@site/blog/2022-09-21-Xpirit.mdx","title":"I\'m joining Xpirit","description":"Career update, I am joining Xpirit part of Xebia as Azure & DevOps Consultant","date":"2022-09-21T08:00:00.000Z","formattedDate":"September 21, 2022","tags":[{"label":"career update","permalink":"/blog/tags/career-update"}],"readingTime":0.525,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"I\'m joining Xpirit","description":"Career update, I am joining Xpirit part of Xebia as Azure & DevOps Consultant","slug":"xpirit","authors":["dsanchezcr"],"tags":["career update"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/Xpirit.gif","date":"2022-09-21T08:00"},"unlisted":false,"prevItem":{"title":"Passed the GitHub Partner Certifications","permalink":"/blog/GitHub-Certifications"},"nextItem":{"title":"I\'m leaving Microsoft","permalink":"/blog/microsoft"}},"content":"Today I\'m very excited to start my new job as Azure & DevOps Consultant at [Xpirit | Part of Xebia](https://xpirit.com). I\'m joining [Esteban Garcia](https://linkedin.com/in/estebangarcia)\'s team as the sixth employee in the USA. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nXpirit is a [Microsoft Gold Partner & GitHub Verified Partner](https://xpirit.com/company/partnerships) that started in 2014 in Netherlands and extended operations in Belgium, Germany, and in 2022 in USA.\\r\\n\\r\\nI\'m thrilled to join this team of highly experienced consultants, experts in cloud transformation using Microsoft Azure, building high performance IT teams using DevOps, and creating Cloud Native Software.\\r\\nXpirit continues growing, come join us, check out the open positions [here](https://www.linkedin.com/jobs/search/?currentJobId=3270399306&f_C=9183026&geoId=92000000).\\r\\n\\r\\n![Xpirit - Engineering Culture](../static/img/Xpirit.gif)"},{"id":"microsoft","metadata":{"permalink":"/blog/microsoft","source":"@site/blog/2022-09-20-LeavingMS.mdx","title":"I\'m leaving Microsoft","description":"Career update, I am leaving Microsoft","date":"2022-09-20T08:00:00.000Z","formattedDate":"September 20, 2022","tags":[{"label":"career update","permalink":"/blog/tags/career-update"}],"readingTime":0.56,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"I\'m leaving Microsoft","description":"Career update, I am leaving Microsoft","slug":"microsoft","authors":["dsanchezcr"],"tags":["career update"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/LeavingMS.jpg","date":"2022-09-20T08:00"},"unlisted":false,"prevItem":{"title":"I\'m joining Xpirit","permalink":"/blog/xpirit"},"nextItem":{"title":"A new website","permalink":"/blog/website"}},"content":"After almost 7 years, today is my last day at Microsoft. It has been great, I cannot say thank you enough to all the teammates, managers, and mentors I\'ve had over the years that have helped me grow and enjoy the journey.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nI will be eternally grateful to Microsoft for all the opportunities, experiences, learnings, all the support I received and especially for all the awesome people I met and had the opportunity to work with.\\r\\n\\r\\nWhile I am leaving Microsoft, my mission will continue. Tomorrow, I\'ll start a new adventure as an Azure & DevOps Consultant to continue helping people to build the most innovative solutions with technology.\\r\\n\\r\\n![Leaving Microsoft](../static/img/LeavingMS.jpg)"},{"id":"website","metadata":{"permalink":"/blog/website","source":"@site/blog/2022-09-01-website.mdx","title":"A new website","description":"Details about the tech behind my new website.","date":"2022-09-01T08:00:00.000Z","formattedDate":"September 1, 2022","tags":[{"label":"webiste","permalink":"/blog/tags/webiste"},{"label":"blog","permalink":"/blog/tags/blog"},{"label":"Azure Static Web Apps","permalink":"/blog/tags/azure-static-web-apps"},{"label":"Dcusaurus","permalink":"/blog/tags/dcusaurus"}],"readingTime":0.465,"hasTruncateMarker":true,"authors":[{"name":"David Sanchez","url":"https://github.com/dsanchezcr","email":"dsanchezcr@outlook.com","imageURL":"https://github.com/dsanchezcr.png","key":"dsanchezcr"}],"frontMatter":{"title":"A new website","description":"Details about the tech behind my new website.","slug":"website","authors":["dsanchezcr"],"tags":["webiste","blog","Azure Static Web Apps","Dcusaurus"],"enableComments":true,"hide_table_of_contents":true,"image":"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/DevOps-Conference.jpg","date":"2022-09-01T08:00"},"unlisted":false,"prevItem":{"title":"I\'m leaving Microsoft","permalink":"/blog/microsoft"}},"content":"Today I am relaunching my website based on [Docusarious from Facebook](https://docusaurus.io). I am running it on Azure Static Web Apps and GitHub Pages.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nA highlight from this static site generator is the localization functionality, as you can see, this websites supports English, Spanish and Portuguese.\\r\\n\\r\\nAnother thing, that liked me is the support of React, TypeScript and Markdown (including MDX).\\r\\n\\r\\nIn this blog I will be sharing tips about technology and, professional career development.\\r\\n\\r\\nIf you have any feedback or suggetion for content don\'t heasitate to reach out.\\r\\n\\r\\nThank you for reading!"}]}')}}]);