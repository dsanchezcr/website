"use strict";(self.webpackChunkdsanchezcr=self.webpackChunkdsanchezcr||[]).push([[5063],{6705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var s=n(5893),i=n(1151);const r={title:"Connecting to SQL Azure without Secrets",description:"In this post I will show you how to connect to SQL Azure without using secrets, using Azure Active Directory.",slug:"SQL-Azure-Without-Secrets",authors:["dsanchezcr"],tags:["SQL Azure","GitHub","Azure Active Directory"],enableComments:!0,hide_table_of_contents:!0,image:"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/SQLAzureWithoutSecrets/SQLAzureWithoutSecrets.jpg",date:"2023-07-03T18:00"},o="Connecting to SQL Azure without secrets using Azure Active Directory",a={permalink:"/blog/SQL-Azure-Without-Secrets",source:"@site/blog/2023-07-03-SQLAzureWithoutSecrets.mdx",title:"Connecting to SQL Azure without Secrets",description:"In this post I will show you how to connect to SQL Azure without using secrets, using Azure Active Directory.",date:"2023-07-03T18:00:00.000Z",formattedDate:"July 3, 2023",tags:[{label:"SQL Azure",permalink:"/blog/tags/sql-azure"},{label:"GitHub",permalink:"/blog/tags/git-hub"},{label:"Azure Active Directory",permalink:"/blog/tags/azure-active-directory"}],readingTime:2.2,hasTruncateMarker:!0,authors:[{name:"David Sanchez",url:"https://github.com/dsanchezcr",email:"dsanchezcr@outlook.com",imageURL:"https://github.com/dsanchezcr.png",key:"dsanchezcr"}],frontMatter:{title:"Connecting to SQL Azure without Secrets",description:"In this post I will show you how to connect to SQL Azure without using secrets, using Azure Active Directory.",slug:"SQL-Azure-Without-Secrets",authors:["dsanchezcr"],tags:["SQL Azure","GitHub","Azure Active Directory"],enableComments:!0,hide_table_of_contents:!0,image:"https://raw.githubusercontent.com/dsanchezcr/website/main/static/img/SQLAzureWithoutSecrets/SQLAzureWithoutSecrets.jpg",date:"2023-07-03T18:00"},unlisted:!1,prevItem:{title:"Extending CosmicWorks with Azure Cognitive Search and Azure OpenAI",permalink:"/blog/cosmicworks-azure-cognitive-search-azure-openai"},nextItem:{title:"How many days work items have been open in Azure Boards",permalink:"/blog/days-work-items-open"}},c={authorsImageUrls:[void 0]},u=[{value:"Introduction",id:"introduction",level:2},{value:"Enabling Azure Active Directory authentication on SQL Azure",id:"enabling-azure-active-directory-authentication-on-sql-azure",level:2},{value:"Adding users to SQL Azure and assigning permissions",id:"adding-users-to-sql-azure-and-assigning-permissions",level:2},{value:"Connecting to SQL Azure using Azure Active Directory",id:"connecting-to-sql-azure-using-azure-active-directory",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"References",id:"references",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"In this post I will show you how to connect to SQL Azure without using secrets, using Azure Active Directory."}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(t.p,{children:["With GitHub Advanced Security, you can scan your code for secrets and vulnerabilities in your codebase and git history by using ",(0,s.jsx)(t.a,{href:"https://docs.github.com/code-security/secret-scanning/about-secret-scanning",children:"Secret Scanning"})," or even go one step further and use ",(0,s.jsx)(t.a,{href:"https://docs.github.com/enterprise-cloud@latest/code-security/secret-scanning/protecting-pushes-with-secret-scanning",children:"push protection"})," to avoid secrets being pushed in your repository. This is an excellent feature when we have secrets in our applications, but it is not enough when we talk about passwords in connections strings, you also need to rotate those passwords, protect them, make sure you are using the correct one for each different stage (Dev, QA, Prod, etc.). A solution to this problem is to use Managed Service Identity (MSI) instead of usernames and passwords to connect to different Azure services, including SQL Azure."]}),"\n",(0,s.jsx)(t.h2,{id:"enabling-azure-active-directory-authentication-on-sql-azure",children:"Enabling Azure Active Directory authentication on SQL Azure"}),"\n",(0,s.jsx)(t.p,{children:"First, we need to make sure Azure Active Directory authentication is enabled on SQL Azure."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(7013).Z+"",width:"1728",height:"726"})}),"\n",(0,s.jsx)(t.h2,{id:"adding-users-to-sql-azure-and-assigning-permissions",children:"Adding users to SQL Azure and assigning permissions"}),"\n",(0,s.jsxs)(t.p,{children:["To do this, we need to connect to the SQL Azure server using SSMS, and run the following query that creates a user from an Azure Active Directory account, and assigns the db_datareader role to it. You can learn more about the ",(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/sql/relational-databases/security/authentication-access/database-level-roles?https://learn.microsoft.com/sql/relational-databases/security/authentication-access/database-level-roles?WT.mc_id=DT-MVP-5005361#fixed-database-roles",children:"SQL roles here"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE USER [<user@AAD-tenant-domain>] FROM EXTERNAL PROVIDER;\r\nALTER ROLE db_datareader ADD MEMBER [<user@AAD-tenant-domain>];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Example:\r\n",(0,s.jsx)(t.img,{src:n(188).Z+"",width:"1552",height:"851"})]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"Note: You can do this at the server level, or at the database level. If you do it at the server level, the user will have access to all the databases in the server. If you do it at the database level, the user will only have access to that database."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"As mentioned you can also use managed identities and service principals. Here is an example of how it looks like when using a managed identity:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(5452).Z+"",width:"1229",height:"1053"})}),"\n",(0,s.jsx)(t.p,{children:"Here is an example of the query you need to run to create the user from a managed identity and assign it a role, in this case db_datareader:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE USER [name-of-the-object] FROM EXTERNAL PROVIDER;\r\nALTER ROLE db_datareader ADD MEMBER [name-of-the-object];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Example:\r\n",(0,s.jsx)(t.img,{src:n(1441).Z+"",width:"1528",height:"877"})]}),"\n",(0,s.jsx)(t.h2,{id:"connecting-to-sql-azure-using-azure-active-directory",children:"Connecting to SQL Azure using Azure Active Directory"}),"\n",(0,s.jsx)(t.p,{children:"Now that we have Azure Active Directory authentication enabled on SQL Azure, and we have added users and assigned permissions, we can connect to SQL Azure using Azure Active Directory."}),"\n",(0,s.jsx)(t.p,{children:"The connectiong string looks like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"Server=tcp;<your-server>.database.windows.net,1433;Initial Catalog=<your-database>;Authentication=Active Directory Managed Identity;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(t.p,{children:"Your connections to SQL Azure are now more secure and without using secrets by using Azure Active Directory."}),"\n",(0,s.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://docs.microsoft.com/azure/azure-sql/database/authentication-aad-overview?WT.mc_id=DT-MVP-5005361",children:"SQL Azure - Using Azure Active Directory Authentication"})}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},7013:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/AADEnabledSQLServer-e77cfc66046d65816ffae2efbfca26ba.jpg"},1441:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/AddingManagedIdentity-0db2d4be1a4a10fd9c7d32566e84c4e4.jpg"},188:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/AddingUser-b0192e606385dbfb7f1cf3aefda943a1.jpg"},5452:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/ManagedIdentity-2f9501c03bf65fcb993bfbe290d16edf.jpg"},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>o});var s=n(7294);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);